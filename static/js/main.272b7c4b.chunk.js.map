{"version":3,"sources":["AppState.tsx","pages/DashboardPage.tsx","api/MockApiClient.ts","components/LocationInput.tsx","pages/SignUpPage.tsx","AppRouter.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserContext","React","createContext","user","updateUser","AppState","children","useState","setUser","Provider","value","Search","Input","columns","title","dataIndex","key","dataSource","firstName","gender","location","email","DashboardPage","useContext","searchText","setSearchText","allData","setallData","filteredData","setFilteredData","useEffect","newUser","placeholder","onChange","e","target","onSearch","filter","data","indexOf","style","width","marginBottom","to","MockApiClient","password","Promise","resolve","reject","setTimeout","console","log","LocationInput","setLocation","onSelect","getInputProps","suggestions","getSuggestionItemProps","className","map","suggestion","description","Option","Select","SignUpPage","setFirstName","setGender","setEmail","setPassword","confirmPassword","setConfirmPassword","push","useHistory","span","offset","onSubmit","preventDefault","alert","signupNewUser","then","successful","required","_gender","minWidth","type","textAlign","marginTop","htmlType","AppRouter","path","exact","from","Header","extra","onClick","Content","Layout","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.272b7c4b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { User } from \"./models\";\n\nexport const UserContext = React.createContext<{\n  user: User | null;\n  updateUser: (user: User | null) => void;\n}>({\n  user: null,\n  updateUser: () => {},\n});\n\nconst AppState: React.FC = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const updateUser = (user: User | null) => setUser(user);\n\n  return (\n    <>\n      <UserContext.Provider value={{ user, updateUser }}>\n        {children}\n      </UserContext.Provider>\n    </>\n  );\n};\n\nexport default AppState;\n","import { Card, Input, Table } from \"antd\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { UserContext } from \"../AppState\";\nconst { Search } = Input;\n\nconst columns = [\n  {\n    title: \"First Name\",\n    dataIndex: \"firstName\",\n    key: \"firstName\",\n  },\n  {\n    title: \"Gender\",\n    dataIndex: \"gender\",\n    key: \"gender\",\n  },\n  {\n    title: \"Location\",\n    dataIndex: \"location\",\n    key: \"location\",\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\",\n  },\n];\n\nconst dataSource = [\n  {\n    key: \"1\",\n    firstName: \"Mike\",\n    gender: \"MALE\",\n    location: \"10 Downing Street, CA\",\n    email: \"mike@example.com\",\n  },\n  {\n    key: \"2\",\n    firstName: \"Jilani\",\n    gender: \"FEMALE\",\n    location: \"Ahem, Sk\",\n    email: \"jil@example.com\",\n  },\n];\n\nconst DashboardPage: React.FC = () => {\n  const { user } = useContext(UserContext);\n  const [searchText, setSearchText] = useState(\"\");\n  const [allData, setallData] = useState(dataSource);\n  const [filteredData, setFilteredData] = useState(allData);\n\n  useEffect(() => {\n    if (user) {\n      const newUser = { ...user, key: \"3\" };\n      setFilteredData([...filteredData, newUser]);\n      setallData([...allData, newUser]);\n    }\n    return () => {};\n  }, []);\n\n  if (!user) {\n    return <Redirect to=\"/signup\" />;\n  }\n\n  return (\n    <>\n      <Card>\n        <h1>Dashboard</h1>\n        <Search\n          placeholder=\"Search via email\"\n          value={searchText}\n          onChange={(e) => {\n            setSearchText(e.target.value);\n          }}\n          onSearch={(value) => {\n            setFilteredData(\n              searchText === \"\"\n                ? allData\n                : allData.filter(\n                    (data) => data.email.indexOf(searchText) !== -1\n                  )\n            );\n          }}\n          style={{ width: 200, marginBottom: \"10px\" }}\n        />\n        <Table dataSource={filteredData} columns={columns} />\n      </Card>\n    </>\n  );\n};\n\nexport default DashboardPage;\n","import { User } from \"../models\";\n\nexport class MockApiClient {\n  async signupNewUser(user: User, password: string) {\n    /* submit user to auth API */\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log(`Submitting new user: ${user.firstName}`);\n        resolve(true);\n      }, 1000);\n    });\n  }\n}\n","import { Input } from \"antd\";\nimport React from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\n\nconst LocationInput: React.FC<{\n  location: string;\n  setLocation: React.Dispatch<React.SetStateAction<string>>;\n}> = ({ location, setLocation }) => {\n  return (\n    <>\n      <PlacesAutocomplete\n        value={location}\n        onChange={setLocation}\n        onSelect={setLocation}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps }) => (\n          <>\n            <div>\n              <Input\n                {...getInputProps({\n                  placeholder: \"Enter location...\",\n                  className: \"location-search-input\",\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {suggestions.map((suggestion) => (\n                  <div {...getSuggestionItemProps(suggestion)}>\n                    <span>{suggestion.description}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </PlacesAutocomplete>\n    </>\n  );\n};\n\nexport default LocationInput;\n","import { Button, Card, Col, Input, Row, Select } from \"antd\";\nimport React, { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { MockApiClient } from \"../api/MockApiClient\";\nimport { UserContext } from \"../AppState\";\nimport LocationInput from \"../components/LocationInput\";\nimport { GenderInput, User } from \"../models\";\n\nconst { Option } = Select;\n\nconst SignUpPage: React.FC = () => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [gender, setGender] = useState<GenderInput>(\"MALE\");\n  const [location, setLocation] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const { push } = useHistory();\n  const { updateUser } = useContext(UserContext);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      return alert(\"Passwords do not match! Try again.\");\n    }\n\n    const newUser: User = {\n      firstName,\n      gender,\n      location,\n      email,\n    };\n    const apiClient = new MockApiClient();\n\n    apiClient.signupNewUser(newUser, password).then((successful) => {\n      if (successful) {\n        updateUser(newUser);\n        push(\"/dashboard\");\n      } else {\n        alert(\"Error! Unable to singup user.\");\n      }\n    });\n  };\n\n  return (\n    <>\n      <Card>\n        <Row>\n          <Col span={12} offset={6}>\n            <h1>Sign Up</h1>\n            <form onSubmit={handleSubmit}>\n              <div>\n                <label>First Name</label>\n                <Input\n                  value={firstName}\n                  placeholder=\"Enter first name...\"\n                  onChange={(e) => setFirstName(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <label>Gender</label>\n                <br />\n                <Select\n                  value={gender}\n                  onChange={(_gender) => setGender(_gender)}\n                  style={{ minWidth: \"100px\" }}\n                  placeholder=\"Select gender...\"\n                >\n                  <Option value=\"MALE\">Male</Option>\n                  <Option value=\"FEMALE\">Female</Option>\n                  <Option value=\"OTHER\">Other</Option>\n                </Select>\n              </div>\n\n              <div>\n                <label>Location</label>\n                <LocationInput location={location} setLocation={setLocation} />\n              </div>\n\n              <div>\n                <label>Email</label>\n                <Input\n                  value={email}\n                  type=\"email\"\n                  placeholder=\"Enter email...\"\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <label>Password</label>\n                <Input\n                  value={password}\n                  type=\"password\"\n                  placeholder=\"Enter password...\"\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <label>Confirm Password</label>\n                <Input\n                  value={confirmPassword}\n                  type=\"password\"\n                  placeholder=\"Enter password again...\"\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                />\n              </div>\n              <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </div>\n            </form>\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n};\n\nexport default SignUpPage;\n","import React, { useContext } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { UserContext } from \"./AppState\";\nimport DashboardPage from \"./pages/DashboardPage\";\nimport SignUpPage from \"./pages/SignUpPage\";\n\nconst AppRouter: React.FC = ({ children }) => {\n  const { user } = useContext(UserContext);\n  return (\n    <>\n      <Router>\n        {children}\n        <Switch>\n          <Route path=\"/signup\" exact>\n            <SignUpPage />\n          </Route>\n          <Route path=\"/dashboard\">\n            {user === null ? <Redirect to=\"/signup\" /> : <DashboardPage />}\n          </Route>\n\n          <Redirect to=\"/signup\" from=\"*\" />\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nexport default AppRouter;\n","import { Button, PageHeader } from \"antd\";\nimport React, { useContext } from \"react\";\nimport { UserContext } from \"../AppState\";\n\nconst Header: React.FC = () => {\n  const { user, updateUser } = useContext(UserContext);\n\n  return (\n    <>\n      <PageHeader\n        title=\"Simple AntD Signup\"\n        extra={\n          user && [<Button onClick={() => updateUser(null)}>Sign Out</Button>]\n        }\n      ></PageHeader>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"./AppRouter\";\nimport Header from \"./components/Header\";\nimport { Layout } from \"antd\";\nimport AppState from \"./AppState\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <>\n      <AppState>\n        <Layout>\n          <Header />\n          <Content>\n            <AppRouter />\n          </Content>\n        </Layout>\n      </AppState>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}